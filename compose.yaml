# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  discord-bot:
    image: kittipongthongnate/dip-sharing-board-discord-bot:latest
    secrets:
      - db-password
      - bot-token
      - channels-id
    environment:
      BOT_TOKEN: /run/secrets/bot-token
      CHANNELS_ID: /run/secrets/channels-id
      DATABASE_USERNAME: root
      DATABASE_HOST: db
      DATABASE_PORT: 3306
      DATABASE_NAME: activities
      DATABASE_PASSWORD: /run/secrets/db-password
      CAMP_CHANNEL_NAME: "camp"
      COMP_CHANNEL_NAME: "comp"
      OTHER_CHANNEL_NAME: "other"
    networks:
      - private
      - public
    ports:
      - 4000:4000
    depends_on:
      db:
        condition: service_healthy

  activities-data:
    image: kittipongthongnate/dip-sharing-board-activities-data:latest
    secrets:
      - db-password
    environment:
      SERVER_HOST: activities-data
      SERVER_PORT: 5000
      DATABASE_USERNAME: root
      DATABASE_HOST: db
      DATABASE_PORT: 3306
      DATABASE_NAME: activities
      DATABASE_PASSWORD: /run/secrets/db-password
    networks:
      - private
      - public
    ports:
      - 5000:5000
    depends_on:
      db:
        condition: service_healthy

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

  db:
    image: mysql:8.0
    restart: always
    # user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
      - ./db/sql:/docker-entrypoint-initdb.d/
    networks:
      - private
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db-password
      MYSQL_DATABASE: activities
    # expose:
    #   - 3306
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "--password=$(cat /run/secrets/db-password)"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 40

  web-app:
    image: kittipongthongnate/dip-sharing-board-web-app:latest
    environment:
      NODE_ENV: production
    networks:
      - public
    ports:
      - 8080:8080

  image-streamer:
    image: kittipongthongnate/dip-sharing-board-image-streamer:latest
    environment:
      SERVER_HOST: image-streamer
      SERVER_PORT: 7000
    networks:
      - public
    ports:
      - 7000:7000
      
volumes:
  db-data:
networks:
  public:
  private:
secrets:
  db-password:
    file: ./db/db-password.txt
  bot-token:
    file: ./bot/bot-token.txt
  channels-id:
    file: ./bot/channels-id.txt